<?xml version="1.0" encoding="utf-8" ?>
<root>
	<datetime>2021年4月17号</datetime>
	<note>
		<li name="第六章内容">
			1.传递api的参数
			2.关键词搜索
			3.数据过滤
			4.封装参数，统一管理
		</li>

		<li name="参数来源">
			1. FromQurey 请求的Url
			2.FromBody  请求体
			3.FromForm 来自表单
			4.FromRoute 来自MVC下的URL
			5. FromService  来自于注入服务依赖
		</li>

		<li name="创建资源Post 请求应用">
			1. post是既不安全也不幂等的http操作
			2.创建post的DTO和GetDTO不能混用
			3.创建成功的回复代码是201 函数CreatedAtRoute 不是200
		</li>
		<P>
			在创建上面的旅游路线和图片复合体时候，一定要注意在返回CreatedAtRoute 参数1：要调用的函数名，在方法签名使用Name="函数名"。 参数2：使用匿名类吧调用函数的参数传进去。参数3：（这个很重要，使用不好会发生jsonconvert发生异常，循环序列化）这个参数应当使用auotmapper 转化后的个体。
		</P>
		
	</note>

	<datetime>2021年4月18号</datetime>
	<note>
		<li name="旅游资源的创建是校验数据">
			1. 使用和Model中的Attribute 约束条件
			2.实现 IValidatableObject 接口 ，返回值用  yield return 迭代器返回。
			3.类级别数据校验Attribute 新建一个类去继承ValidationAttribute 并且重写 IsValid 方法
		</li>

		<li name="状态码400 badRequest 重写写成422 （个人认为没有特殊需求可以不用实现）">
			1. 在服务注入时候调用 services.AddControllers 方法时候添加规则
			2.后面追加调用 ConfigureApiBehaviorOptions 非法模型请求工厂。
			<P tag="实例代码">
				
				 .ConfigureApiBehaviorOptions(
                setupAction => setupAction.InvalidModelStateResponseFactory = context =>
                    {
                        var problemDetail = new ValidationProblemDetails(context.ModelState)
                        {
                            Type = "阿莱克斯",
                            Title = "数据验证失败",
                            Status = StatusCodes.Status422UnprocessableEntity,
                            Detail = "详细信息",
                            Instance = context.HttpContext.Request.Path
                        };
                        problemDetail.Extensions.Add("id", context.HttpContext.TraceIdentifier);
                        return new UnprocessableEntityObjectResult(problemDetail)
                        {
                            ContentTypes = { "application/problem+json"}
                        };
                    }
                );
	
			</P>
		</li>
	</note>

	<note>
		<li name="更新产品 Put和Post">
			1.Put 请求和 patch 请求
			2.使用put请求完整更新旅游路线
			3.使用Patch请求与JSON Patch Decoument 来实现局部旅游资源更新
			4.更新数据验证
		</li>
	
		
	</note>
</root>
