// <auto-generated />
using System;
using FakeXieCheng.Demo.MyFakeContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FakeXieCheng.Demo.Migrations
{
    [DbContext(typeof(FakeContext))]
    partial class FakeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FakeXieCheng.Demo.Models.CartLineItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float?>("DiscountPresent")
                        .HasColumnType("real");

                    b.Property<Guid?>("OrederId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ShoppingCartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TouristID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TouristRoutID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShoppingCartId");

                    b.HasIndex("TouristRoutID");

                    b.HasIndex("UserOrderId");

                    b.ToTable("CartLineItems");
                });

            modelBuilder.Entity("FakeXieCheng.Demo.Models.MyApplicationIdentity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "bb28d4b9-bb87-4e9f-8157-8710337d21ab",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3466eb42-745b-461a-b9a9-a1048621d4d4",
                            Email = "172@qq.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "172@QQ.COM",
                            NormalizedUserName = "172@QQ.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKKz/H8hm7L24PIRM8OvIoLyEfPUApIaNOo4iSGsIgkVqsSpjuKmWGcIUL4al5bCkQ==",
                            PhoneNumber = "123456",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ef1afb21-3529-4029-8286-f81448fe52ab",
                            TwoFactorEnabled = false,
                            UserName = "172@qq.com"
                        });
                });

            modelBuilder.Entity("FakeXieCheng.Demo.Models.ShoppingCart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserID")
                        .IsUnique()
                        .HasFilter("[UserID] IS NOT NULL");

                    b.ToTable("ShoppingCarts");
                });

            modelBuilder.Entity("FakeXieCheng.Demo.Models.TouristRout", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("date");

                    b.Property<DateTime?>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(1500)")
                        .HasMaxLength(1500);

                    b.Property<float?>("DiscountPresent")
                        .HasColumnType("real");

                    b.Property<decimal>("DriinalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Features")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fees")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OriginalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("Rating")
                        .HasColumnType("float");

                    b.Property<int?>("StratCity")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<byte>("TravlDays")
                        .HasColumnType("tinyint");

                    b.Property<int?>("TripType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("TouristRout");

                    b.HasData(
                        new
                        {
                            ID = new Guid("6c15d8b3-1788-4db0-a13e-64b1a2c566c9"),
                            CreateTime = new DateTime(2021, 4, 28, 14, 4, 9, 181, DateTimeKind.Local).AddTicks(8636),
                            Description = "都是水",
                            DriinalPrice = 0m,
                            Features = "吃喝玩乐",
                            Fees = "住宿费自己掏",
                            Notes = "注意安全",
                            OriginalPrice = 1300m,
                            Rating = 36.0,
                            StratCity = 0,
                            Title = "青天河",
                            TravlDays = (byte)0,
                            TripType = 3
                        },
                        new
                        {
                            ID = new Guid("82f53116-dd3b-4ecd-8abc-df2c62ec9d66"),
                            CreateTime = new DateTime(2021, 4, 27, 14, 4, 9, 183, DateTimeKind.Local).AddTicks(2734),
                            Description = "都是水111",
                            DriinalPrice = 0m,
                            Features = "```吃喝玩乐",
                            Fees = "555住宿费自己掏",
                            Notes = "··注意安全",
                            OriginalPrice = 1200m,
                            Rating = 12.0,
                            StratCity = 1,
                            Title = "云台山",
                            TravlDays = (byte)1,
                            TripType = 1
                        },
                        new
                        {
                            ID = new Guid("dfb22b7c-4206-45e2-9590-7cc09ddec02c"),
                            CreateTime = new DateTime(2021, 4, 26, 14, 4, 9, 183, DateTimeKind.Local).AddTicks(2911),
                            Description = "水比较多",
                            DriinalPrice = 0m,
                            Features = "可以划船",
                            Fees = "巴拉巴拉",
                            Notes = "··注意安全。。",
                            OriginalPrice = 120m,
                            Rating = 69.0,
                            Title = "八里沟",
                            TravlDays = (byte)2
                        },
                        new
                        {
                            ID = new Guid("22640ece-9092-471e-ac60-e50adb80bd58"),
                            CreateTime = new DateTime(2021, 4, 25, 14, 4, 9, 183, DateTimeKind.Local).AddTicks(2923),
                            Description = "山比较多",
                            DriinalPrice = 0m,
                            Features = "路比较远",
                            Fees = "玩玩赶紧回家",
                            Notes = "··注意巴拉巴拉安全。。",
                            OriginalPrice = 100m,
                            Rating = 2.0,
                            Title = "万仙山",
                            TravlDays = (byte)3
                        },
                        new
                        {
                            ID = new Guid("3c0ed37e-6836-4ef3-ad82-7cc49121ea4e"),
                            CreateTime = new DateTime(2021, 4, 24, 14, 4, 9, 183, DateTimeKind.Local).AddTicks(2927),
                            Description = "都是水",
                            DriinalPrice = 0m,
                            Features = "吃喝玩乐",
                            Fees = "住宿费自己掏",
                            Notes = "注意安全",
                            OriginalPrice = 1300m,
                            Rating = 91.0,
                            Title = "青天河",
                            TravlDays = (byte)4
                        },
                        new
                        {
                            ID = new Guid("64190267-b924-4a82-a711-88793a5d63e4"),
                            CreateTime = new DateTime(2021, 4, 23, 14, 4, 9, 183, DateTimeKind.Local).AddTicks(2931),
                            Description = "都是水111",
                            DriinalPrice = 0m,
                            Features = "```吃喝玩乐",
                            Fees = "555住宿费自己掏",
                            Notes = "··注意安全",
                            OriginalPrice = 1200m,
                            Rating = 8.0,
                            Title = "云台山",
                            TravlDays = (byte)5
                        },
                        new
                        {
                            ID = new Guid("0bb13ad9-fce9-42fe-a4ea-4a580ad15543"),
                            CreateTime = new DateTime(2021, 4, 22, 14, 4, 9, 183, DateTimeKind.Local).AddTicks(2933),
                            Description = "水比较多",
                            DriinalPrice = 0m,
                            Features = "可以划船",
                            Fees = "巴拉巴拉",
                            Notes = "··注意安全。。",
                            OriginalPrice = 120m,
                            Rating = 88.0,
                            StratCity = 3,
                            Title = "八里沟",
                            TravlDays = (byte)6,
                            TripType = 2
                        },
                        new
                        {
                            ID = new Guid("d3685074-5bac-421b-9232-001a35e0f3be"),
                            CreateTime = new DateTime(2021, 4, 21, 14, 4, 9, 183, DateTimeKind.Local).AddTicks(2945),
                            Description = "山比较多",
                            DriinalPrice = 0m,
                            Features = "路比较远",
                            Fees = "玩玩赶紧回家",
                            Notes = "··注意巴拉巴拉安全。。",
                            OriginalPrice = 100m,
                            Rating = 55.0,
                            StratCity = 3,
                            Title = "万仙山",
                            TravlDays = (byte)7,
                            TripType = 2
                        },
                        new
                        {
                            ID = new Guid("e7aac598-86c7-411c-b028-92cf02e65708"),
                            CreateTime = new DateTime(2021, 4, 20, 14, 4, 9, 183, DateTimeKind.Local).AddTicks(2949),
                            Description = "都是水",
                            DriinalPrice = 0m,
                            Features = "吃喝玩乐",
                            Fees = "住宿费自己掏",
                            Notes = "注意安全",
                            OriginalPrice = 1300m,
                            Rating = 24.0,
                            StratCity = 3,
                            Title = "青天河",
                            TravlDays = (byte)8,
                            TripType = 2
                        },
                        new
                        {
                            ID = new Guid("25ef0fbe-805c-4051-9cba-1303006c8184"),
                            CreateTime = new DateTime(2021, 4, 19, 14, 4, 9, 183, DateTimeKind.Local).AddTicks(2951),
                            Description = "都是水111",
                            DriinalPrice = 0m,
                            Features = "```吃喝玩乐",
                            Fees = "555住宿费自己掏",
                            Notes = "··注意安全",
                            OriginalPrice = 1200m,
                            Rating = 54.0,
                            StratCity = 3,
                            Title = "云台山",
                            TravlDays = (byte)9,
                            TripType = 2
                        },
                        new
                        {
                            ID = new Guid("838d30e2-163b-440e-878a-e3aa6a1ea69f"),
                            CreateTime = new DateTime(2021, 4, 18, 14, 4, 9, 183, DateTimeKind.Local).AddTicks(2955),
                            Description = "水比较多",
                            DriinalPrice = 0m,
                            Features = "可以划船",
                            Fees = "巴拉巴拉",
                            Notes = "··注意安全。。",
                            OriginalPrice = 120m,
                            Rating = 97.0,
                            StratCity = 3,
                            Title = "八里沟",
                            TravlDays = (byte)10,
                            TripType = 2
                        },
                        new
                        {
                            ID = new Guid("530a830f-dbf9-45c2-b8a2-a436bfeb2197"),
                            CreateTime = new DateTime(2021, 4, 17, 14, 4, 9, 183, DateTimeKind.Local).AddTicks(2958),
                            Description = "山比较多",
                            DriinalPrice = 0m,
                            Features = "路比较远",
                            Fees = "玩玩赶紧回家",
                            Notes = "··注意巴拉巴拉安全。。",
                            OriginalPrice = 100m,
                            Rating = 86.0,
                            StratCity = 3,
                            Title = "万仙山",
                            TravlDays = (byte)11,
                            TripType = 2
                        });
                });

            modelBuilder.Entity("FakeXieCheng.Demo.Models.TouristRoutPicture", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Destription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TouristRoutID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.HasKey("ID");

                    b.HasIndex("TouristRoutID");

                    b.ToTable("TouristRoutPictures");

                    b.HasData(
                        new
                        {
                            ID = -1,
                            Destription = "太美丽了",
                            TouristRoutID = new Guid("6c15d8b3-1788-4db0-a13e-64b1a2c566c9"),
                            Url = "../images/1.jpg"
                        },
                        new
                        {
                            ID = -2,
                            Destription = "太美丽了11111",
                            TouristRoutID = new Guid("82f53116-dd3b-4ecd-8abc-df2c62ec9d66"),
                            Url = "../images/2.jpg"
                        },
                        new
                        {
                            ID = -3,
                            Destription = "<<<<<<太美丽了11",
                            TouristRoutID = new Guid("dfb22b7c-4206-45e2-9590-7cc09ddec02c"),
                            Url = "../images/3.jpg"
                        });
                });

            modelBuilder.Entity("FakeXieCheng.Demo.Models.UserOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateTimeUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderState")
                        .HasColumnType("int");

                    b.Property<string>("ThirdPartyPayMent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("userOrders");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "3faa1348-c9a0-49aa-912b-0d5007f806a7",
                            ConcurrencyStamp = "b0eb9187-1004-4771-8965-d16461b9e26c",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MyApplicationIdentityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("MyApplicationIdentityId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MyApplicationIdentityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("MyApplicationIdentityId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MyApplicationIdentityId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("MyApplicationIdentityId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "bb28d4b9-bb87-4e9f-8157-8710337d21ab",
                            RoleId = "3faa1348-c9a0-49aa-912b-0d5007f806a7"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MyApplicationIdentityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.HasIndex("MyApplicationIdentityId");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FakeXieCheng.Demo.Models.CartLineItem", b =>
                {
                    b.HasOne("FakeXieCheng.Demo.Models.ShoppingCart", null)
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ShoppingCartId");

                    b.HasOne("FakeXieCheng.Demo.Models.TouristRout", "TouristRout")
                        .WithMany()
                        .HasForeignKey("TouristRoutID");

                    b.HasOne("FakeXieCheng.Demo.Models.UserOrder", null)
                        .WithMany("UserOrderCartItems")
                        .HasForeignKey("UserOrderId");
                });

            modelBuilder.Entity("FakeXieCheng.Demo.Models.ShoppingCart", b =>
                {
                    b.HasOne("FakeXieCheng.Demo.Models.MyApplicationIdentity", "User")
                        .WithOne("ShoppingCart")
                        .HasForeignKey("FakeXieCheng.Demo.Models.ShoppingCart", "UserID");
                });

            modelBuilder.Entity("FakeXieCheng.Demo.Models.TouristRoutPicture", b =>
                {
                    b.HasOne("FakeXieCheng.Demo.Models.TouristRout", "TouristRout")
                        .WithMany("Pictures")
                        .HasForeignKey("TouristRoutID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FakeXieCheng.Demo.Models.UserOrder", b =>
                {
                    b.HasOne("FakeXieCheng.Demo.Models.MyApplicationIdentity", "User")
                        .WithMany("UserOrders")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FakeXieCheng.Demo.Models.MyApplicationIdentity", null)
                        .WithMany("Claims")
                        .HasForeignKey("MyApplicationIdentityId");

                    b.HasOne("FakeXieCheng.Demo.Models.MyApplicationIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FakeXieCheng.Demo.Models.MyApplicationIdentity", null)
                        .WithMany("Logins")
                        .HasForeignKey("MyApplicationIdentityId");

                    b.HasOne("FakeXieCheng.Demo.Models.MyApplicationIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("FakeXieCheng.Demo.Models.MyApplicationIdentity", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("MyApplicationIdentityId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FakeXieCheng.Demo.Models.MyApplicationIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FakeXieCheng.Demo.Models.MyApplicationIdentity", null)
                        .WithMany("Tokens")
                        .HasForeignKey("MyApplicationIdentityId");

                    b.HasOne("FakeXieCheng.Demo.Models.MyApplicationIdentity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
